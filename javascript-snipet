{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	},
	"Print to console": {
		"prefix": "ambilThis",
		"body": [
			"$(this).data('$1')"
		],
		"description": "Log output to console"
	},
	"Webalert": {
		"prefix": "wealert",
		"body": [
			"webalerts.createAlert(\"success\", response.success, 2000);"
		],
		"description": "Log output to console"
	},
	"Image To BASE64": {
		"prefix": "imageToBase64",
		"body": [
			"let image = document.querySelector(\"#gambar\");//Gambar Yang Di Upload",
			"let imgPre = document.querySelector(\"#img-preview\");//Gambar yang akan di tempeli",
			"",
			"const oFReader = new FileReader();",
			"oFReader.readAsDataURL(image.files[0]);",
			"oFReader.onload = function (oFREvent) {",
			"imgPre.src = oFREvent.target.result;",
			"}",
		],
		"description": "Log output to console"
	},
	"Convert Base64 Image": {
		"prefix": "base64Image",
		"body": [
			"let modal = $(\"#$1\")",
			"let image = document.getElementById('$2');",
			"let cropper, reader, file",
			"$(\"body\").on(\"change\", \"#$3\", function (e) {",
			"    let files = e.target.files;",
			"    let done = function (url) {",
			"        image.src = url;",
			"        modal.modal(\"show\");",
			"    }",
			"    if (files && files.length > 0) {",
			"        file = files[0];",
			"        if (URL) {",
			"            done(URL.createObjectURL(file));",
			"        } else if (FileReader) {",
			"            reader = new FileReader();",
			"            reader.onload = function (e) {",
			"                done(reader.result);",
			"            }",
			"            reader.readAsDataURL(file)",
			"        }",
			"    }",
			"",
			"})",
			"",
			"modal.on('shown.bs.modal', function () {",
			"    cropper = new Cropper(image, {",
			"        aspectRatio: 1 / 1,",
			"        preview: '.preview'",
			"    })",
			"}).on('hidden.bs.modal', function () {",
			"    cropper.destroy();",
			"    cropper = null;",
			"})",
			"",
			"$(\"#$1\").on(\"click\", \".$4\", function () {",
			"    canvas = cropper.getCroppedCanvas({",
			"        width: 1000,",
			"        height: 1000,",
			"    })",
			"    canvas.toBlob(function (blob) {",
			"        let image = document.querySelector(\"#$5\");",
			"        // const imgPre = document.querySelector(\"#$6\");",
			"        const oFReader = new FileReader();",
			"        oFReader.readAsDataURL(blob);",
			"        oFReader.onload = function (oFREvent) {",
			"            var file = dataURLtoFile(oFREvent.target.result, \"photo-product.png\");",
			"            let container = new DataTransfer();",
			"            container.items.add(file);",
			"            image.files = container.files;",
			"            var newfile = image.files[0];",
			"",
			"        }",
			"    })",
			"})",
			"",
			"function dataURLtoFile(dataurl, filename) {",
			"",
			"    var arr = dataurl.split(','),",
			"        mime = arr[0].match(/:(.*?);/)[1],",
			"        bstr = atob(arr[1]),",
			"        n = bstr.length,",
			"        u8arr = new Uint8Array(n);",
			"",
			"    while (n--) {",
			"        u8arr[n] = bstr.charCodeAt(n);",
			"    }",
			"",
			"    return new File([u8arr], filename, { type: mime });",
			"}"
		],
		"description": "Log output to console"
	},
	"filesPhoto": {
		"prefix": "photofiles",
		"body": [
"			let photo = document.querySelector(\"input[name='$1']\")",
			"",
"        	let formData = new FormData();",
"        	if (photo.value != '') {",
"        	    formData.append('photo', photo.files[0]);",
"        	}",
			"",
"        	// Mendapatkan data inputan lainnya dari hasil serialize",
"        	let serializedData = $(\"form[id='form-product']\").serialize();;// Ganti #form dengan ID formulir Anda",
"        	let otherData = serializedData.split(\"&\");",
			"",
"        	otherData.forEach(function (item) {",
"        	    let keyValue = item.split(\"=\");",
"        	    formData.append(keyValue[0], decodeURIComponent(keyValue[1]));",
"        	});",
		],
		"description": "Log output to console"
	},
	"Query Selector Id": {
		"prefix": "qsi",
		"body": "document.querySelector('#$1')",
		"description": "Log output to console"
	},
	"Just Number": {
		"prefix": "onlyNumber",
		"body": [
			"$(\"#$1\").on(\"keydown\", function (e) {"
			"	let key = e.key;"
			"	if ("
			"		!/[0-9,]/.test(key) &&"
			"		key !== \"Backspace\" &&"
			"		key !== \"Delete\" &&"
			"		key !== \"ArrowLeft\" &&"
			"		key !== \"Tab\" &&"
			"		key !== \"ArrowRight\""
			"	) {"
			"		e.preventDefault(); // Mencegah input jika bukan angka atau koma"
			"	}""});"
		],
		"description": "Log output to console"
	},
	"Simple Money Format": {
		"prefix": "money",
		"body": [
"			$(\"input.money\").simpleMoneyFormat({"
"				currencySymbol: \"Rp\","
"				decimalPlaces: 0,"
"				thousandsSeparator: \".\","
"			});"
		],
		"description": "Log output to console"
	},
	"Query Selector Class": {
		"prefix": "qsc",
		"body": "document.querySelector('.$1')",
		"description": "Log output to console"
	},
	"get id": {
		"prefix": "ambilid",
		"body": "$(\"#$1\").$2",
		"description": "Log output to console"
	},
	"get class": {
		"prefix": "ambilclass",
		"body": "$(\".$1\").$2",
		"description": "Log output to console"
	},
	"ajax": {
		"prefix": "buatajax",
		"body": [
			"$.ajax({",
			"data: {$1 : $2},",
			"url: \"$3\",",
			"type: \"$4\",",
			"dataType: 'json',",
			"success: function (response) {",
			"}",
			"});",
		],
		"description": "Log output to console"
	},
	"form ajax": {
		"prefix": "formajax",
		"body": [
			"let formdata = $('form[id=\"$1\"]').serialize();",
			"$.ajax({",
			"data: formdata,",
			"url: \"$5\",",
			"type: \"$6\",",
			"dataType: 'json',",
			"success: function (response) {",
			"    $(button).removeAttr(\"disabled\");",
			"    reset();",
			"    table.ajax.reload()",
			"    Swal.fire(\"Success!\", response.success, \"success\");",
			"},",
			"error: function (xhr, status, error) {",
			"    if (xhr.status == 400) {",
			"        $(button).removeAttr(\"disabled\");",
			"        let errors = xhr.responseJSON.errors",
			"        displayErrors(errors)",
			"    }",
			"}",
			"});",
		],
		"description": "Log output to console"
	},
	"error hendler": {
		"prefix": "errorhandler",
		"body": [
			"//Hendler Error",
			"function displayErrors(errors) {",
			"// menghapus class 'is-invalid' dan pesan error sebelumnya",
			"$(\"input.form-control\").removeClass(\"is-invalid\");",
			"$(\"select.form-control\").removeClass(\"is-invalid\");",
			"$(\"div.invalid-feedback\").remove();",
			"",
			"// menampilkan pesan error baru",
			"$.each(errors, function (field, messages) {",
			"let inputElement = $(\"input[name=\" + field + \"]\");",
			"let selectElement = $(\"select[name=\" + field + \"]\");",
			"let textAreaElement = $(\"textarea[name=\" + field + \"]\");",
			"let feedbackElement = $(",
			"'<div class=\"invalid-feedback ml-2\"></div>'",
			");",
			"",
			"$(\".btn-close\").on(\"click\", function () {",
			"inputElement.each(function () {",
			"$(this).removeClass(\"is-invalid\");",
			"});",
			"textAreaElement.each(function () {",
			"$(this).removeClass(\"is-invalid\");",
			"});",
			"selectElement.each(function () {",
			"$(this).removeClass(\"is-invalid\");",
			"});",
			"});",
			"",
			"$.each(messages, function (index, message) {",
			"feedbackElement.append(",
			"$('<p class=\"p-0 m-0\" style=\"font-style=:italic\">' + message + \"</p>\")",
			");",
			"});",
			"",
			"if (inputElement.length > 0) {",
			"inputElement.addClass(\"is-invalid\");",
			"inputElement.after(feedbackElement);",
			"}",
			"",
			"if (selectElement.length > 0) {",
			"selectElement.addClass(\"is-invalid\");",
			"selectElement.after(feedbackElement);",
			"}",
			"if (textAreaElement.length > 0) {",
			"textAreaElement.addClass(\"is-invalid\");",
			"textAreaElement.after(feedbackElement);",
			"}",
			"inputElement.each(function () {",
			"if (inputElement.attr(\"type\") == \"text\" || inputElement.attr(\"type\") == \"number\") {",
			"inputElement.on(\"click\", function () {",
			"$(this).removeClass(\"is-invalid\");",
			"});",
			"inputElement.on(\"change\", function () {",
			"$(this).removeClass(\"is-invalid\");",
			"});",
			"} else if (inputElement.attr(\"type\") == \"date\") {",
			"inputElement.on(\"change\", function () {",
			"$(this).removeClass(\"is-invalid\");",
			"});",
			"} else if (inputElement.attr(\"type\") == \"password\") {",
			"inputElement.on(\"click\", function () {",
			"$(this).removeClass(\"is-invalid\");",
			"});",
			"} else if (inputElement.attr(\"type\") == \"email\") {",
			"inputElement.on(\"click\", function () {",
			"$(this).removeClass(\"is-invalid\");",
			"});",
			"}",
			"});",
			"textAreaElement.each(function () {",
			"textAreaElement.on(\"click\", function () {",
			"$(this).removeClass(\"is-invalid\");",
			"});",
			"});",
			"selectElement.each(function () {",
			"selectElement.on(\"click\", function () {",
			"$(this).removeClass(\"is-invalid\");",
			"});",
			"});",
			"});",
			"}",
		],
		"description": "Log output to console"
	},
	"error hendler node js": {
		"prefix": "errorhandlerNode",
		"body": [
			"function displayErrorsNode(errors) {"
			"	// menghapus class 'is-invalid' dan pesan error sebelumnya"
			"	$(\"input.form-control\").removeClass(\"is-invalid\");"
			"	$(\"select.form-control\").removeClass(\"is-invalid\");"
			"	$(\"div.invalid-feedback\").remove();"""
			"	// menampilkan pesan error baru"
			"	$.each(errors, function (location, msg) {"
			"		let field = msg.path"
			"		let inputElement = $(\"input[name=\" + field + \"]\");"
			"		let selectElement = $(\"select[name=\" + field + \"]\");"
			"		let textAreaElement = $(\"textarea[name=\" + field + \"]\");"
			"		let feedbackElement = $("
			"			'<div class=\"invalid-feedback ml-2\"></div>'"
			"		);"
			"		$(\".btn-close\").on(\"click\", function () {"
			"			inputElement.each(function () {"
			"				$(this).removeClass(\"is-invalid\");"
			"			});"
			"			textAreaElement.each(function () {"
			"				$(this).removeClass(\"is-invalid\");"
			"			});"
			"			selectElement.each(function () {"
			"				$(this).removeClass(\"is-invalid\");"
			"			});"
			"		});"
			"		// $.each(msg, function (index, message) {"
			"		feedbackElement.append("
			"			$('<p class=\"p-0 m-0 text-danger\" style=\"font-style:italic\">' + message +\"</p>\")"
			"		);"
			"		// });"
			"		if (inputElement.length > 0) {"
			"			inputElement.addClass(\"is-invalid\");"
			"			inputElement.after(feedbackElement);"
			"		}"
			"		if (selectElement.length > 0) {"
			"			selectElement.addClass(\"is-invalid\");"
			"			selectElement.after(feedbackElement);"
			"		}"
			"		if (textAreaElement.length > 0) {"
			"			textAreaElement.addClass(\"is-invalid\");"
			"			textAreaElement.after(feedbackElement);"
			"		}"
			"		inputElement.each(function () {"
			"			if (inputElement.attr(\"type\") == \"text\" || inputElement.attr(\"type\") == \"number\") {"
			"				inputElement.on(\"click\", function () {"
			"					$(this).removeClass(\"is-invalid\");"
			"				});"
			"				inputElement.on(\"change\", function () {"
			"					$(this).removeClass(\"is-invalid\");"
			"				});"
			"			} else if (inputElement.attr(\"type\") == \"date\") {"
			"				inputElement.on(\"change\", function () {"
			"					$(this).removeClass(\"is-invalid\");"
			"				});"
			"			} else if (inputElement.attr(\"type\") == \"password\") {"
			"				inputElement.on(\"click\", function () {"
			"					$(this).removeClass(\"is-invalid\");"
			"				});"
			"			} else if (inputElement.attr(\"type\") == \"email\") {"
			"				inputElement.on(\"click\", function () {"
			"					$(this).removeClass(\"is-invalid\");"
			"				});"
			"			}"
			"		});"
			"		textAreaElement.each(function () {"
			"			textAreaElement.on(\"click\", function () {"
			"				$(this).removeClass(\"is-invalid\");"
			"			});"
			"		});"
			"		selectElement.each(function () {"
			"			selectElement.on(\"click\", function () {"
			"				$(this).removeClass(\"is-invalid\");"
			"			});"
			"		});"
			"	});}"
		],
		"description": "Log output to console"
	},
	"Datatables Init": {
		"prefix": "datatablesInit",
		"body": [
			"let table$1 = $(\"#dataTables\").DataTable({",
			"createdRow: function (row, data, index) {",
			"$(row).addClass(\"selected\");",
			"},",
			"processing: true,",
			"responsive: true,",
			"searching: true,",
			"bLengthChange: true,",
			"info: false,",
			"ordering: true,",
			"serverSide: true,",
			"ajax: {",
			"url: \"/$2\",",
			"type: \"GET\",",
			"data: function (d) {",
			"d.id = $(\"#unique_no_reg\").val();",
			"},",
			"},",
			"columnDefs: [",
			"{",
			"targets: [5], // index kolom atau sel yang ingin diatur",
			"className: \"text-center\", // kelas CSS untuk memposisikan isi ke tengah",
			"},",
			"],",
			"columns: [",
			"{",
			"render: function (data, type, row, meta) {",
			"return meta.row + meta.settings._iDisplayStart + 1;",
			"},",
			"},",
			"{",
			"data: \"$3\",",
			"},",
			"{",
			"data: \"$4\",",
			"},",
			"{",
			"data: \"$5\",",
			"},",
			"{",
			"data: \"$6\",",
			"},",
			"{",
			"data: \"action\",",
			"orderable: true,",
			"searchable: true,",
			"},",
			"],",
			"order: [[0, \"desc\"]],",
			"});",
		],
		"description": "Log output to console"
	},
	"Datatables Init2": {
		"prefix": "datatablesInit2",
		"body": [
"			let table = $(\"#table-guru\").DataTable({",
"				responsive: true,",
"				responsive: !0,",
"				language: {",
"					paginate: {",
"						previous: \"<i class='ri-arrow-left-s-line'>\",",
"						next: \"<i class='ri-arrow-right-s-line'>\",",
"					},",
"				},",
"				drawCallback: function () {",
"					$(\".dataTables_paginate > .pagination\").addClass(",
"						\"pagination-rounded\"",
"					);",
"				},",
"				autoWidth: false,",
"				serverSide: true,",
"				ajax: {",
			"url: \"/$2\",",
			"type: \"GET\",",
			"data: function (d) {",
			"d.id = $(\"#unique_no_reg\").val();",
			"},",
			"},",
"				columns: [",
"					{",
"						data: null,",
"						orderable: false,",
"						render: function (data, type, row, meta) {",
"							var pageInfo = $(\"#table-guru\").DataTable().page.info();",
"							var index = meta.row + pageInfo.start + 1;",
"							return index;",
"						},",
"					},",
"					{",
"						data: \"npk\",",
"					},",
"					{",
"						data: \"nama_guru\",",
"					},",
"					{",
"						data: \"action\",",
"						orderable: true,",
"						searchable: true,",
"					},",
"				],",
"				columnDefs: [",
"					{",
"						targets: [3], // index kolom atau sel yang ingin diatur",
"						className: \"text-center\", // kelas CSS untuk memposisikan isi ke tengah",
"					},",
"					{",
"						searchable: false,",
"						orderable: false,",
"						targets: 0, // Kolom nomor, dimulai dari 0",
"					},",
"				],",
"			});",
		],
		"description": "Log output to console"
	},
	"Currency": {
		"prefix": "currency",
		"body": [
			"new Intl.NumberFormat(\"id-ID\", {",
			"style: \"currency\",",
			"currency: \"IDR\",",
			"minimumFractionDigits: 0,",
			"})",
			".format($1)",
			".replace(\"Rp\", \"\")",
			".replace(/\\./g, \",\")",
		],
		"description": "Log output to console"
	},
	"Rander HTML Element": {
		"prefix": "randerElement",
		"body": [
			"data:\"status\",",
			"    render: function (data, type, row, meta) {",
			"        if (data == \"1\") {",
			"            return type === \"display\"",
			"                ? '<button class=\"badge bg-success border-0\">Aktif</button>'",
			"                : data;",
			"        } else {",
			"            return type === \"display\"",
			"                ? '<button class=\"badge bg-danger border-0\">Tidak Aktif</button>'",
			"                : data;",
			"        }",
			"    },",
		],
		"description": "Log output to console"
	},
	"Delete Sweet Alert": {
		"prefix": "delsweets",
		"body": [
			"//HAPUS DATA",
			"$(\"#$1\").on(\"click\", \".$2\", function () {",
			"let unique = $(this).attr(\"data-unique\");",
			"let token = $(this).attr(\"data-token\");",
			"Swal.fire({",
			"title: \"Apakah Kamu Yakin?\",",
			"text: \"Kamu akan menghapus data guru!\",",
			"icon: \"warning\",",
			"showCancelButton: true,",
			"confirmButtonColor: \"#3085d6\",",
			"cancelButtonColor: \"#d33\",",
			"confirmButtonText: \"Yes, Hapus!\",",
			"}).then((result) => {",
			"if (result.isConfirmed) {",
			"$.ajax({",
			"data: {",
			"_method: \"DELETE\",",
			"_token: token,",
			"},",
			"url: \"/$3/\" + unique,",
			"type: \"POST\",",
			"dataType: \"json\",",
			"success: function (response) {",
			"table.ajax.reload();",
			"Swal.fire(\"Deleted!\", response.success, \"success\");",
			"},",
			"});",
			"}",
			"});",
			"});",
		],
		"description": "Log output to console"
	},
	"Sweet Alert": {
		"prefix": "sweetsalert",
		"body": "Swal.fire(\"Deleted!\", response.success, \"success\");",
		"description": "Log output to console"
	},
	"even Listener": {
		"prefix": "evenListener",
		"body": [
			"$(\"$1\").on(\"click\" ,function(){",
			"$3",
			"})",
		],
		"description": "Log output to console"
	},
	"even Listener bubling": {
		"prefix": "evenListenerBubling",
		"body": [
			"$(\"$1\").on(\"click\", \"$2\" ,function(){",
			"$3",
			"})",
		],
		"description": "Log output to console"
	},
	"Format Tanggal Indonesia": {
		"prefix": "dateIndo",
		"body": [
			"function formatDateIndonesia(dateString) {",
			"let options = { year: 'numeric', month: 'long', day: 'numeric' };",
			"let date = new Date(dateString);",
			"return date.toLocaleDateString('id-ID', options);",
			"}"
		]
	},
	"Ready": {
		"prefix": "docready",
		"body": "$(document).ready(function() {$1});"
	},
	"Disable Button": {
		"prefix": "disableButton",
		"body": [
			"let button = $(this)",
			"$(button).attr(\"disabled\", \"true\");"
		]
	},
	"Enable Button": {
		"prefix": "enableButton",
		"body": "$(button).removeAttr(\"disabled\");"
	},
	"Rset Inputan": {
		"prefix": "resetInputan",
		"body": [
			"//KOSONGKAN SEMUA INPUTAN",
			"function reset() {",
			"	let form = $(\"form[id='$1']\").serializeArray();",
			"	form.map((a) => {",
			"		$(`#${a.name}`).val(\"\");",
			"	})",
			"	$(\"#$2\").html(\"\")",
			"	$(\"#$3\").html(\"\")",
			"}",
		]
	},
}
